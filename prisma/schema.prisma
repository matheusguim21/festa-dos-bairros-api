// schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}
enum Role {
  ADMIN
  STALL
}


model User {
  id        Int      @id @default(autoincrement())
  name      String
  username  String   @unique
  password  String
  role      Role     @default(STALL) // <- novo campo aqui
  stall     Stall?
  createdAt DateTime @default(now())
}


model Stall {
  id          Int           @id @default(autoincrement())
  name        String
  userId      Int           @unique
  user        User          @relation(fields: [userId], references: [id])
  products   Product[]

  Order Order[]
}

model StockIn {
  id         Int      @id @default(autoincrement())
  productId  Int
  product    Product  @relation(fields: [productId], references: [id])
  quantity   Int
  date       DateTime @default(now())
}

model StockOut {
  id         Int      @id @default(autoincrement())
  productId  Int
  product    Product  @relation(fields: [productId], references: [id])
  quantity   Int
  date       DateTime @default(now())
}


model Product {
  id         Int         @id @default(autoincrement())
  name       String
  price      Float
  quantity   Int         @default(0) // quantidade atual em estoque
  stallId    Int  
  stall      Stall       @relation(fields: [stallId], references: [id])
  sales      Role[]
  stockIns   StockIn[]
  stockOuts  StockOut[]
  createdAt  DateTime    @default(now())

  OrderItem OrderItem[]
}
enum OrderStatus {
  PENDING
  DELIVERED
  CANCELED
}

model Order {
  id         Int          @id @default(autoincrement())
  stallId    Int
  stall      Stall        @relation(fields: [stallId], references: [id])
  buyerName  String?
  total      Float
  date       DateTime     @default(now())
  status     OrderStatus  @default(PENDING)
  items      OrderItem[]
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  order     Order   @relation(fields: [orderId], references: [id])
  productId Int
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  unitPrice Float
  lineTotal Float
}

model Cashier {
  id        Int       @id @default(autoincrement())
  name      String
  username     String    @unique
  password  String
  createdAt DateTime  @default(now())
  tokenSales TokenSale[]
}

model TokenSale {
  id          Int       @id @default(autoincrement())
  cashierId   Int
  cashier     Cashier   @relation(fields: [cashierId], references: [id])
  buyerName   String?   // se quiser registrar o nome de quem comprou as fichas
  amountPaid  Float     // valor total pago em dinheiro
  createdAt   DateTime  @default(now())
}
